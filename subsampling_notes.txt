Start at x = 0; first pixel edge at x = 0.5
Pixel edges = [-0.5, 0.5; 0.5, 1.5; 1.5, 2.5; 2.5, 3.5; etc.]
Pixel centers = [  0.0;      1.0;      2.0;      3.0;  etc. ]
fine-pixel counts = [

xFine centers = [-0.45, -0.35, -0.25, -0.15, -0.05, 0.05, 0.15, 0.25, 0.35, 0.45] = 10 total
xFine edges = [-0.5,  -0.4, ...                                           0.4, 0.5]

xFine = N.arange(-0.45, 10.5, 0.1)
xCoarse = N.arange(0.0, 11.0, 1.0)


def sumpixels( x_finescale, y_finescale, stepsize ):
	nFine = len(x_finescale)

def SumSubsample( x_range, func, params, Nsubsamples ):
	"""Function to compute a vector func(x_range), using subsampling.
	"""
	
	if subsample == 1:
		return func(x_range)
	else:
		Npts = len(x_range)
		N_subsampled_pts = Npts * Nsubsamples
		fullXrange = x_range[-1] - x_range[0]
		deltaX_orig = fullXrange / (Npts - 1)
		deltaX_sub = deltaX_orig / Nsubsamples
		startX = x_range[0] - deltaX_orig/2
		new_x_range = startX + N.arange(N_subsampled_pts)*deltaX_sub
		subsampledData = func(new_x_range, params)
		
		# sum up the subsamples
		resampledData = N.zeros(Npts)
		for i in range(Npts):
			resampledData[i] = N.sum(subsampledData[i*Npts:i*Npts + Nsubsamples])
		
		return (new_x_range, subsampledData, resampledData)


