
** NEAR-TERM FUTURE TODO:

[x] New class encapsulating return metadata from minimizers (like mp_results, but
for all minimizers)


[..] King model FunctionObject
	-- function_objects/func_king.h/cpp : in progress
	-- need to set up some profile-computation tests (e.g., compare 1-D slices
	through output image with 1-D profiles generated by ...?)
		[x] Write Python code to implement function; test by generating plot
		with same ranges as Fig.10 of Peng+2010 and comparing (overlay in Illustrator?)
		[x] Generate plot with all profiles
		[x] Compare plot with Fig.10 of Peng+2010 in Illustrator
	-- check that we get I= 0 for r > r_t; possibly introduce shortcut in code
	to just return 0 in that case.
		[ ] Generate images (with no subsampling) and compare profiles with
		output of Python code
		[ ] Set up unit tests


[x] Update memory estimation to account for smaller FFT-related arrays


[] Update memory estimation to account for possible oversampled PSF use


[] Add "const" specifies to input parameters of functions, as appropriate


[] Option to output default/simple configuration file (and then quite)
	-- for imfit, this could include e.g. GAIN = 1 as well as single function
	-- for makeimage, this could include NROWS and NCOLS as well as single function


[] Modify handling of oversampled PSF to catch case where user wants entire
image oversampled
	-- e.g., if total number of pixels in main + oversampled region (model images,
	including edge-padding for PSF) > number of pixels in hypothetical oversampling
	of entire image ==> switch to oversampling of entire image

	-- need to test this to make sure time spent isn't wrongly estimated (e.g.,
	actual time with oversampling includes FFT + downsampling)


[] Oversampling of multiple sub-regions (possibly with their own oversampled PSFs)


[] Optional convolution with charge-diffusion kernel?


[] Test generation (and saving?) of FFTW plans
	-- might require making a cloned repo


[] Annotations to describe function parameters
	-- optional text strings in a FunctionObject class which provide a short, one-line
	description/reminder of what the parameter is (and maybe its units?)
	-- printed on same line as parameter name, with "#" in between
	-- possibly alternate command-line flag to specify this instead of the
	current, "bare-bones" version


[] Compiling parts of program(s) into a library, which is then linked when
compiling imfit and makeimage (and other things, like timing). Idea is to set
things up so it's easier for other people to use "libimfit" without the
specific input/output functionality/limitations of imfit/makeimage.



** MINOR BUGS TO FIX/IMPROVEMENTS TO MAKE:



* FIXED

[X] --quiet option with Nelder-Mead simplex (--nm) is not truly quiet (some of N-M
simplex output is suppressed, but "iteration XXX" is still printed)
	-- OK, this is a difference between the current version of NLopt library ints
	dynamic form (what we normally use) and the static-linking one

[X] Compiling with our SCons option --no-nlopt fails to catch references to NLopt
function NMSimplexFit in bootstrap_errors.cpp
	Reported by Guillermo Barro
	-- FIX: add preprocessor directives to comment out all references to NLopt stuff
